{"version":3,"file":"static/js/86.d0ae4f7b.chunk.js","mappings":"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","sources":["helpers/getRegionsOfCities.js","pages/RegisterPage/StepOne.jsx","webpack://petly-frontend/./src/pages/RegisterPage/PhoneInput.css?0cb8","pages/RegisterPage/StepTwo.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["export const getRegionsOfCities = array => {\n  return array.map(item => {\n    let city = Object.assign({}, item);\n    if (Number(item.useCounty)) {\n      city.value = `${item.cityEn},  ${item.countyEn}, ${item.stateEn} region`;\n      city.label = `${item.cityEn},  ${item.countyEn}, ${item.stateEn} region`;\n    } else {\n      city.value = `${item.cityEn}, ${item.stateEn} region`;\n      city.label = `${item.cityEn}, ${item.stateEn} region`;\n    }\n\n    return city;\n  });\n};\n\nexport const getRegionsOfCitiesUA = array => {\n  return array.map(item => {\n    let city = Object.assign({}, item);\n    if (Number(item.useCounty)) {\n      city.value = `${item.city},  ${item.county}, ${item.state} область`;\n      city.label = `${item.city},  ${item.county}, ${item.state} область`;\n    } else {\n      city.value = `${item.city}, ${item.state} область`;\n      city.label = `${item.city}, ${item.state} область`;\n    }\n\n    return city;\n  });\n};\n\n// export const getRegionsOfCities = array => {\n//   return array.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n//     return Number(useCounty)\n//       ? `${cityEn}, ${countyEn}, ${stateEn} region`\n//       : `${cityEn}, ${stateEn} region`;\n//   });\n// };\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport {\n  ButtonImg,\n  Div,\n  OpenEyaIcon,\n  ClosedEyaIcon,\n  GoogleImg,\n} from 'pages/RegisterPage/RegisterPage.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport { Error, Button } from 'pages/authFormStyle.styled';\nimport { GoogleLoginButton } from 'pages/LoginPage/LoginPage.styled';\n\nexport const StepOne = props => {\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\n  const [confirmVisibility, setConfirmVisibility] = useState(false);\n\n  const { t } = useTranslation();\n\n  const toggleShowPassword = () => {\n    setPasswordVisibility(!passwordVisibility);\n  };\n\n  const toggleShowcConfirm = () => {\n    setConfirmVisibility(!confirmVisibility);\n  };\n\n  return (\n    <>\n      <CustomField\n        type=\"email\"\n        name=\"email\"\n        placeholder={t('Email')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.email}\n        required\n        autoFocus={true}\n      />\n      <Error name=\"email\" component=\"div\" />\n      <Div>\n        <CustomField\n          id=\"password\"\n          name=\"password\"\n          placeholder={t('Password')}\n          type={passwordVisibility ? 'text' : 'password'}\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.password}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowPassword}>\n          {passwordVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"password\" component=\"div\" />\n      </Div>\n      <Div>\n        <CustomField\n          id=\"confirm\"\n          type={confirmVisibility ? 'text' : 'password'}\n          name=\"confirm\"\n          placeholder={t('Confirm_Password')}\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.confirm}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowcConfirm}>\n          {confirmVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"confirm\" component=\"div\" />\n      </Div>\n      <Button type=\"button\" onClick={props.next} disabled={props.isValid}>\n        {t('Next')}\n      </Button>\n      <GoogleLoginButton href=\"https://petly-backend-flax.vercel.app/api/users/google\">\n        <GoogleImg src={GooglePic} alt=\"Google\" />\n        {t('Signup_with_Google')}\n      </GoogleLoginButton>\n    </>\n  );\n};\nexport default StepOne;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport toast from 'react-hot-toast';\nimport i18n from 'i18n';\nimport { useTranslation } from 'react-i18next';\n\nimport { commonRoutes } from 'api/baseSettings';\nimport {\n  getRegionsOfCities,\n  getRegionsOfCitiesUA,\n} from 'helpers/getRegionsOfCities';\n\nimport { Error, Button } from 'pages/authFormStyle.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport css from './PhoneInput.css';\n\nconst StepTwo = props => {\n  const { t } = useTranslation();\n  const language = localStorage.getItem('i18nextLng');\n  let lang = 'en';\n  if (language === 'uk' || language.includes('uk')) {\n    lang = 'uk';\n  }\n\n  const [cityValue, setCityValue] = useState(null);\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleOnInputChange = value => {\n    if (value.length >= 3) {\n      setCityValue(value);\n    }\n  };\n\n  useEffect(() => {\n    async function getCities() {\n      if (cityValue < 3) {\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const { data } = await commonRoutes.get(\n          `api/cities?query=${cityValue}&lang=${lang}`\n        );\n        if (lang === 'en') {\n          setResults(getRegionsOfCities(data));\n        } else {\n          setResults(getRegionsOfCitiesUA(data));\n        }\n        setIsLoading(false);\n      } catch (error) {\n        toast.error(i18n.t('Try_again'));\n      }\n    }\n\n    getCities();\n  }, [cityValue, lang]);\n\n  return (\n    <>\n      <CustomField\n        type=\"text\"\n        name=\"name\"\n        placeholder={t('Name')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.name}\n        required\n      />\n      <Error name=\"name\" component=\"div\" />\n      <Select\n        onInputChange={handleOnInputChange}\n        options={results}\n        onChange={selection => props.forCity(selection)}\n        placeholder={t('City_region')}\n        isSearchable=\"true\"\n        isLoading={isLoading}\n        noOptionsMessage={({ inputValue }) =>\n          !inputValue ? t('City_letters') : t('City_notfound')\n        }\n        styles={{\n          control: (baseStyles, state) => ({\n            // ...baseStyles,\n            display: 'flex',\n            padding: '4px',\n            border: '1px solid #F59256',\n            borderRadius: '20px',\n            backgroundColor: '#FDF7F2',\n            borderColor: state.isSelected ? '#3CBC81' : '#F59256',\n          }),\n        }}\n      />\n      <Error name=\"city\" component=\"div\" />\n      <PhoneInput\n        name=\"phone\"\n        type=\"tel\"\n        className={css}\n        onlyCountries={['ua']}\n        country={'ua'}\n        countryCodeEditable={false}\n        errors={props.errors}\n        value={props.values.phone}\n        touched={props.touched}\n        onChange={(phone, _, e) => {\n          props.setFieldValue('phone', `+${phone}`);\n\n          if (phone.length < 12) {\n            e.target.style.border = '1px solid #E2001A';\n          } else {\n            e.target.style.border = '1px solid #3CBC81';\n          }\n        }}\n      />\n      {/* <CustomField\n        type=\"text\"\n        name=\"city\"\n        placeholder={t('City_region')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.city}\n        required\n      />\n      <Error name=\"city\" component=\"div\" /> */}\n      {/* <CustomField\n        type=\"tel\"\n        name=\"phone\"\n        placeholder=\"Mobile phone\"\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.phone}\n        required\n      /> */}\n      {/* <Error name=\"phone\" component=\"div\" /> */}\n      <Button type=\"submit\">{t('Register')}</Button>\n      <Button type=\"button\" onClick={props.back}>\n        {t('Back')}\n      </Button>\n    </>\n  );\n};\nexport default StepTwo;\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport i18n from 'i18n';\nimport toast from 'react-hot-toast';\n\nimport { signup, logIn } from 'redux/auth/operations';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\n\nimport {\n  userRegisterStepOneSchema,\n  userRegisterStepTwoSchema,\n} from 'helpers/validationSchemas';\n\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nimport RouteFormLoginRegister from 'pages/routeFormLoginRegister';\nimport {\n  BoxAuth,\n  FormCustom,\n  LogoBg,\n  TitleAuth,\n} from 'pages/authFormStyle.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirm: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nexport const RegisterPage = () => {\n  const [currentStep, setCarrentStep] = useState(0);\n  const { t } = useTranslation();\n  const location = useLocation();\n\n  useEffect(() => {\n    document.title = `Registration`;\n  }, [location]);\n\n  const dispatch = useDispatch();\n\n  const handleNextStep = () => {\n    setCarrentStep(currentStep + 1);\n  };\n\n  const handlePrevStep = () => {\n    setCarrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = async (\n    { email, password, name, city, phone },\n    { resetForm }\n  ) => {\n    if (!city) {\n      toast.error(i18n.t('City_required'));\n      return;\n    }\n    if (phone.length !== 13) {\n      toast.error(i18n.t('Enter_phone'));\n      return;\n    }\n\n    const resultSignup = await dispatch(\n      signup({ email, password, name, city, phone })\n    );\n\n    if (resultSignup.type === 'auth/signup/fulfilled') {\n      await dispatch(logIn({ email, password }));\n    }\n\n    if (resultSignup.type === 'auth/signup/rejected') {\n      toast.error(resultSignup.payload.message);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>{t('Registration')}</TitleAuth>\n\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSubmit}\n              validationSchema={\n                currentStep === 0\n                  ? userRegisterStepOneSchema\n                  : userRegisterStepTwoSchema\n              }\n            >\n              {({ errors, touched, isValid, setFieldValue, values }) => (\n                <FormCustom autoComplete=\"off\">\n                  {currentStep === 0 && (\n                    <StepOne\n                      next={handleNextStep}\n                      errors={errors}\n                      touched={touched}\n                      isValid={!isValid}\n                      values={values}\n                    />\n                  )}\n                  {currentStep === 1 && (\n                    <StepTwo\n                      back={handlePrevStep}\n                      errors={errors}\n                      touched={touched}\n                      values={values}\n                      setFieldValue={setFieldValue}\n                      forCity={value => {\n                        setFieldValue('city', value);\n                      }}\n                    />\n                  )}\n                </FormCustom>\n              )}\n            </Formik>\n\n            <RouteFormLoginRegister\n              link=\"/login\"\n              question={t('Is_account')}\n              pageName={t('Log_in')}\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["getRegionsOfCities","array","map","item","city","Object","assign","Number","useCounty","value","cityEn","countyEn","stateEn","label","getRegionsOfCitiesUA","county","state","props","useState","passwordVisibility","setPasswordVisibility","confirmVisibility","setConfirmVisibility","t","useTranslation","type","name","placeholder","errors","touched","values","email","required","autoFocus","component","id","password","onClick","confirm","next","disabled","isValid","href","src","GooglePic","alt","language","localStorage","getItem","lang","includes","cityValue","setCityValue","results","setResults","isLoading","setIsLoading","useEffect","commonRoutes","data","toast","i18n","getCities","onInputChange","length","options","onChange","selection","forCity","isSearchable","noOptionsMessage","inputValue","styles","control","baseStyles","display","padding","border","borderRadius","backgroundColor","borderColor","isSelected","className","css","onlyCountries","country","countryCodeEditable","phone","_","e","setFieldValue","target","style","back","initialValues","currentStep","setCarrentStep","location","useLocation","document","title","dispatch","useDispatch","handleNextStep","handlePrevStep","handleSubmit","resetForm","signup","resultSignup","logIn","payload","message","Box","as","onSubmit","validationSchema","userRegisterStepOneSchema","userRegisterStepTwoSchema","autoComplete","link","question","pageName"],"sourceRoot":""}