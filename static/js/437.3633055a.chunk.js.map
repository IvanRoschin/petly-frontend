{"version":3,"file":"static/js/437.3633055a.chunk.js","mappings":"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","sources":["helpers/getRegionsOfCities.js","helpers/validationSchemas/RegisterValidationSchema.jsx","pages/RegisterPage/StepOne.jsx","webpack://petly-frontend/./src/pages/RegisterPage/PhoneInput.css?0cb8","pages/RegisterPage/StepTwo.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["export const getRegionsOfCities = array => {\n  return array.map(item => {\n    let city = Object.assign({}, item);\n\n    if (Number(item.useCounty)) {\n      city.value = `${item.cityEn}, ${item.countyEn}, ${item.stateEn} region`;\n      city.label = `${item.cityEn}, ${item.countyEn}, ${item.stateEn} region`;\n    } else {\n      city.value = `${item.cityEn}, ${item.stateEn} region`;\n      city.label = `${item.cityEn}, ${item.stateEn} region`;\n    }\n\n    return city;\n  });\n};\n\n// export const getRegionsOfCities = array => {\n//   return array.map(({ useCounty, stateEn, cityEn, countyEn }) => {\n//     return Number(useCounty)\n//       ? `${cityEn}, ${countyEn}, ${stateEn} region`\n//       : `${cityEn}, ${stateEn} region`;\n//   });\n// };\n","import * as Yup from 'yup';\nimport i18n from 'i18n';\n\nexport const registerValidationSchemaOne = Yup.object().shape({\n  email: Yup.string()\n    .matches(\n      // /^((([0-9A-Za-z]{1}[-0-9A-z.]{1,}[0-9A-Za-z]{1})))@([-A-Za-z]{1,}.){1,2}[-A-Za-z]{2,})$/,\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      i18n.t('email_match')\n    )\n    .min(5, i18n.t('at_least_five'))\n    .required(i18n.t('required_field')),\n  password: Yup.string()\n    .matches(/^\\S+$/, i18n.t('no_space'))\n    .min(7, i18n.t('at_least_seven'))\n    .max(32, i18n.t('max_tt'))\n    .required(i18n.t('required_field')),\n  confirm: Yup.string()\n    .oneOf([Yup.ref('password'), null], i18n.t('Passwords_match'))\n    .required(i18n.t('required_field')),\n});\n\nexport const registerValidationSchemaTwo = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?: [a-zA-Zа-яА-ЯіІїЇґҐ]+)*$/,\n      i18n.t('Only_cyrillic_latin')\n    )\n    .required(i18n.t('required_field')),\n\n  city: Yup.string(),\n  // .matches(\n  //   /^[a-zA-Zа-яА-ЯіІїЇґҐ]+(?:[-\\s]?[a-zA-Zа-яА-ЯіІїЇґҐ]+)*,\\s*[a-zA-Zа-яА-ЯіІїЇґҐ'’\\s-]+$/,\n  //   i18n.t('Should_City')\n  // )\n  // .required(i18n.t('required_field')),\n  phone: Yup.string()\n    .matches(/^\\+380\\d{9}$/, 'Invalid phone number(+380111111111)')\n    .min(13)\n    .max(13),\n  //   .required('Required field'),\n});\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport {\n  ButtonImg,\n  Div,\n  OpenEyaIcon,\n  ClosedEyaIcon,\n  GoogleImg,\n} from 'pages/RegisterPage/RegisterPage.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport { Error, Button } from 'pages/authFormStyle.styled';\nimport { GoogleLoginButton } from 'pages/LoginPage/LoginPage.styled';\n\nexport const StepOne = props => {\n  const [passwordVisibility, setPasswordVisibility] = useState(false);\n  const [confirmVisibility, setConfirmVisibility] = useState(false);\n\n  const { t } = useTranslation();\n\n  const toggleShowPassword = () => {\n    setPasswordVisibility(!passwordVisibility);\n  };\n\n  const toggleShowcConfirm = () => {\n    setConfirmVisibility(!confirmVisibility);\n  };\n\n  return (\n    <>\n      <CustomField\n        type=\"email\"\n        name=\"email\"\n        placeholder={t('Email')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.email}\n        required\n        autoFocus={true}\n      />\n      <Error name=\"email\" component=\"div\" />\n      <Div>\n        <CustomField\n          id=\"password\"\n          name=\"password\"\n          placeholder={t('Password')}\n          type={passwordVisibility ? 'text' : 'password'}\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.password}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowPassword}>\n          {passwordVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"password\" component=\"div\" />\n      </Div>\n      <Div>\n        <CustomField\n          id=\"confirm\"\n          type={confirmVisibility ? 'text' : 'password'}\n          name=\"confirm\"\n          placeholder={t('Confirm_Password')}\n          errors={props.errors}\n          touched={props.touched}\n          values={props.values.confirm}\n          required\n        />\n        <ButtonImg type=\"button\" onClick={toggleShowcConfirm}>\n          {confirmVisibility ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n        </ButtonImg>\n        <Error name=\"confirm\" component=\"div\" />\n      </Div>\n      <Button type=\"button\" onClick={props.next} disabled={props.isValid}>\n        {t('Next')}\n      </Button>\n      <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\">\n        <GoogleImg src={GooglePic} alt=\"Google\" />\n        {t('Signup_with_Google')}\n      </GoogleLoginButton>\n    </>\n  );\n};\nexport default StepOne;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport toast from 'react-hot-toast';\nimport i18n from 'i18n';\nimport { useTranslation } from 'react-i18next';\n\nimport { commonRoutes } from 'api/baseSettings';\nimport { getRegionsOfCities } from 'helpers/getRegionsOfCities';\n\nimport { Error, Button } from 'pages/authFormStyle.styled';\nimport CustomField from 'pages/authFormStyle.styled';\nimport css from './PhoneInput.css';\n\nconst StepTwo = props => {\n  const { t } = useTranslation();\n\n  const [cityValue, setCityValue] = useState(null);\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleOnInputChange = value => {\n    if (value.length >= 3) {\n      setCityValue(value);\n    }\n  };\n\n  useEffect(() => {\n    async function getCities() {\n      if (cityValue < 3) {\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n\n        const { data } = await commonRoutes.get(\n          `api/cities?query=${cityValue}`\n        );\n        setResults(getRegionsOfCities(data));\n\n        setIsLoading(false);\n      } catch (error) {\n        toast.error(i18n.t('Try_again'));\n      }\n    }\n\n    getCities();\n  }, [cityValue]);\n\n  return (\n    <>\n      <CustomField\n        type=\"text\"\n        name=\"name\"\n        placeholder={t('Name')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.name}\n        required\n      />\n      <Error name=\"name\" component=\"div\" />\n\n      <Select\n        onInputChange={handleOnInputChange}\n        options={results}\n        onChange={selection => props.forCity(selection.value)}\n        placeholder={t('City_region')}\n        isSearchable=\"true\"\n        isLoading={isLoading}\n        noOptionsMessage={({ inputValue }) =>\n          !inputValue ? t('City_letters') : t('City_notfound')\n        }\n        styles={{\n          control: (baseStyles, state) => ({\n            // ...baseStyles,\n            display: 'flex',\n            padding: '4px',\n            border: '1px solid #F59256',\n            borderRadius: '20px',\n            backgroundColor: '#FDF7F2',\n            borderColor: state.isSelected ? '#3CBC81' : '#F59256',\n          }),\n        }}\n      />\n      <Error name=\"city\" component=\"div\" />\n\n      <PhoneInput\n        name=\"phone\"\n        type=\"tel\"\n        className={css}\n        onlyCountries={['ua']}\n        country={'ua'}\n        countryCodeEditable={false}\n        errors={props.errors}\n        value={props.values.phone}\n        touched={props.touched}\n        onChange={(phone, _, e) => {\n          props.setFieldValue('phone', `+${phone}`);\n\n          if (phone.length < 12) {\n            e.target.style.border = '1px solid #E2001A';\n          } else {\n            e.target.style.border = '1px solid #3CBC81';\n          }\n        }}\n      />\n\n      {/* <CustomField\n        type=\"text\"\n        name=\"city\"\n        placeholder={t('City_region')}\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.city}\n        required\n      />\n      <Error name=\"city\" component=\"div\" /> */}\n\n      {/* <CustomField\n        type=\"tel\"\n        name=\"phone\"\n        placeholder=\"Mobile phone\"\n        errors={props.errors}\n        touched={props.touched}\n        values={props.values.phone}\n        required\n      /> */}\n      {/* <Error name=\"phone\" component=\"div\" /> */}\n\n      <Button type=\"submit\">{t('Register')}</Button>\n      <Button type=\"button\" onClick={props.back}>\n        {t('Back')}\n      </Button>\n    </>\n  );\n};\nexport default StepTwo;\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport i18n from 'i18n';\nimport toast from 'react-hot-toast';\n\nimport { signup, logIn } from 'redux/auth/operations';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\n\nimport {\n  registerValidationSchemaOne,\n  registerValidationSchemaTwo,\n} from 'helpers/validationSchemas/RegisterValidationSchema';\n\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\n\nimport RouteFormLoginRegister from 'pages/routeFormLoginRegister';\nimport {\n  BoxAuth,\n  FormCustom,\n  LogoBg,\n  TitleAuth,\n} from 'pages/authFormStyle.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  confirm: '',\n  name: '',\n  city: '',\n  phone: '',\n};\n\nexport const RegisterPage = () => {\n  const [currentStep, setCarrentStep] = useState(0);\n  const { t } = useTranslation();\n  const location = useLocation();\n\n  useEffect(() => {\n    document.title = `Registration`;\n  }, [location]);\n\n  const dispatch = useDispatch();\n\n  const handleNextStep = () => {\n    setCarrentStep(currentStep + 1);\n  };\n\n  const handlePrevStep = () => {\n    setCarrentStep(currentStep - 1);\n  };\n\n  const handleSubmit = async (\n    { email, password, name, city, phone },\n    { resetForm }\n  ) => {\n    if (!city) {\n      toast.error(i18n.t('City_required'));\n      return;\n    }\n    if (phone.length !== 13) {\n      toast.error(i18n.t('Enter_phone'));\n      return;\n    }\n\n    const resultSignup = await dispatch(\n      signup({ email, password, name, city, phone })\n    );\n\n    if (resultSignup.type === 'auth/signup/fulfilled') {\n      await dispatch(logIn({ email, password }));\n    }\n\n    if (resultSignup.type === 'auth/signup/rejected') {\n      toast.error(resultSignup.payload.message);\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>{t('Registration')}</TitleAuth>\n\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSubmit}\n              validationSchema={\n                currentStep === 0\n                  ? registerValidationSchemaOne\n                  : registerValidationSchemaTwo\n              }\n            >\n              {({ errors, touched, isValid, setFieldValue, values }) => (\n                <FormCustom autoComplete=\"off\">\n                  {currentStep === 0 && (\n                    <StepOne\n                      next={handleNextStep}\n                      errors={errors}\n                      touched={touched}\n                      isValid={!isValid}\n                      values={values}\n                    />\n                  )}\n                  {currentStep === 1 && (\n                    <StepTwo\n                      back={handlePrevStep}\n                      errors={errors}\n                      touched={touched}\n                      values={values}\n                      setFieldValue={setFieldValue}\n                      forCity={value => {\n                        setFieldValue('city', value);\n                      }}\n                    />\n                  )}\n                </FormCustom>\n              )}\n            </Formik>\n\n            <RouteFormLoginRegister\n              link=\"/login\"\n              question={t('Is_account')}\n              pageName={t('Log_in')}\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["getRegionsOfCities","array","map","item","city","Object","assign","Number","useCounty","value","cityEn","countyEn","stateEn","label","registerValidationSchemaOne","Yup","shape","email","matches","i18n","min","required","password","max","confirm","oneOf","registerValidationSchemaTwo","name","phone","props","useState","passwordVisibility","setPasswordVisibility","confirmVisibility","setConfirmVisibility","t","useTranslation","type","placeholder","errors","touched","values","autoFocus","component","id","onClick","next","disabled","isValid","href","src","GooglePic","alt","cityValue","setCityValue","results","setResults","isLoading","setIsLoading","useEffect","commonRoutes","data","toast","getCities","onInputChange","length","options","onChange","selection","forCity","isSearchable","noOptionsMessage","inputValue","styles","control","baseStyles","state","display","padding","border","borderRadius","backgroundColor","borderColor","isSelected","className","css","onlyCountries","country","countryCodeEditable","_","e","setFieldValue","target","style","back","initialValues","currentStep","setCarrentStep","location","useLocation","document","title","dispatch","useDispatch","handleNextStep","handlePrevStep","handleSubmit","resetForm","signup","resultSignup","logIn","payload","message","Box","as","onSubmit","validationSchema","autoComplete","link","question","pageName"],"sourceRoot":""}