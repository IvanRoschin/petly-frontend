{"version":3,"file":"static/js/175.6adf3eda.chunk.js","mappings":"6IAGMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,IAAI,GAAIC,EAAAA,EAAAA,EAAO,oBACfC,IAAI,GAAI,aACRC,QACC,uEACAF,EAAAA,EAAAA,EAAO,kBAERG,SAASH,EAAAA,EAAAA,EAAO,mBACnBI,SAAUR,EAAAA,KAEPG,IAAI,EAAGC,EAAAA,EAAAA,EAAO,mBACdC,IAAI,GAAID,EAAAA,EAAAA,EAAO,WACfE,QAAQ,QAASF,EAAAA,EAAAA,EAAO,qBACxBG,SAASH,EAAAA,EAAAA,EAAO,wBAGrB,K,8QC+GA,EA9FyB,WACvB,OAA0CK,EAAAA,EAAAA,WAAS,GAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,GAAWC,EAAAA,EAAAA,MACTC,GAAMC,EAAAA,EAAAA,MAAND,EACFE,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRC,SAASC,MAAT,OACD,GAAE,CAACJ,IAEJ,IAAMK,EAAY,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,UAAjB,SACOX,GAASY,EAAAA,EAAAA,IAAMF,IADtB,OAGM,yBAFnBG,EADa,QAGHC,MACdC,EAAAA,GAAAA,MAAYF,EAAYG,QAAQC,SAGlCN,IAPmB,2CAAH,wDAUZO,EAAiB,WACrBnB,GAAkBD,EACnB,EAED,OACE,SAACqB,EAAA,EAAD,CAAKC,GAAG,UAAR,UACE,SAAC,KAAD,WACE,SAAC,IAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,UAAYlB,EAAE,YACd,SAAC,KAAD,CACEmB,cAAe,CAAE/B,MAAO,GAAIM,SAAU,IACtC0B,SAAUb,EACVc,iBAAkBpC,EAAAA,EAHpB,SAKG,gBAAGqC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASf,EAApB,EAAoBA,OAApB,OACC,UAAC,KAAD,YACE,SAAC,KAAD,CACEI,KAAK,QACLY,KAAK,QACLC,YAAazB,EAAE,SACf0B,aAAa,MACbJ,OAAQA,EACRC,QAASA,EACTf,OAAQA,EAAOpB,MACfK,UAAQ,KAEV,SAAC,KAAD,CAAO+B,KAAK,QAAQG,UAAU,SAC9B,SAAC,KAAD,CACEf,KAAMhB,EAAgB,OAAS,WAC/B4B,KAAK,WACLC,YAAazB,EAAE,YACf0B,aAAa,MACbJ,OAAQA,EACRC,QAASA,EACTf,OAAQA,EAAOd,SACfD,UAAQ,KAEV,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAWmB,KAAK,SAASgB,QAASZ,EAAlC,SACGpB,GAAgB,SAAC,KAAD,KAAkB,SAAC,KAAD,SAIvC,SAAC,KAAD,CAAO4B,KAAK,WAAWG,UAAU,YAEnC,SAAC,KAAD,CAAQf,KAAK,SAAb,SAAuBZ,EAAE,YAEzB,UAAC,KAAD,CAAmB6B,KAAK,yDAAxB,WAEE,SAAC,KAAD,CAAWC,IAAKC,EAAAA,EAAWC,IAAI,WAC9BhC,EAAE,0BArCR,KA0CH,SAAC,IAAD,CACEiC,KAAK,YACLC,SAAUlC,EAAE,cACZmC,SAAUnC,EAAE,eAEd,SAAC,IAAD,CACEiC,KAAK,WACLC,SAAUlC,EAAE,qBACZmC,SAAUnC,EAAE,qBAOzB,C","sources":["helpers/validationSchemas/loginSchema.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import * as yup from 'yup';\nimport i18n from 'i18n';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .min(12, i18n.t('at_least_twelve'))\n    .max(50, 'Max_fifty')\n    .matches(\n      /^(?=.{1,63}$)(?=.{2,}@)[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n      i18n.t('Invalid_email')\n    )\n    .required(i18n.t('Email_required')),\n  password: yup\n    .string()\n    .min(7, i18n.t('at_least_seven'))\n    .max(32, i18n.t('max_tt'))\n    .matches(/^\\S+$/, i18n.t('Password_contain'))\n    .required(i18n.t('Password_required')),\n});\n\nexport default schema;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport toast from 'react-hot-toast';\n\nimport schema from 'helpers/validationSchemas/loginSchema';\nimport { logIn } from 'redux/auth/operations.js';\n\nimport { Container } from 'globalStyles/globalStyle';\nimport { Box } from 'components/Box/Box';\nimport GooglePic from 'images/svg/google-color-svgrepo-com.svg';\n\nimport RouteFormLoginRegister from '../routeFormLoginRegister.jsx';\nimport CustomField from '../authFormStyle.styled';\nimport {\n  TitleAuth,\n  FormCustom,\n  Button,\n  Error,\n  BoxAuth,\n  LogoBg,\n} from '../authFormStyle.styled';\n\nimport {\n  GoogleLoginButton,\n  GoogleImg,\n  LoginPOsitionBtn,\n} from './LoginPage.styled.jsx';\n\nimport {\n  ButtonImg,\n  ClosedEyaIcon,\n  Div,\n  OpenEyaIcon,\n} from 'pages/RegisterPage/RegisterPage.styled.jsx';\n\nexport const LoginPage = () => {\n  const [passwordShown, setPasswordShown] = useState(false);\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const location = useLocation();\n\n  useEffect(() => {\n    document.title = `Login`;\n  }, [location]);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const resultLogin = await dispatch(logIn(values));\n\n    if (resultLogin.type === 'auth/login/rejected') {\n      toast.error(resultLogin.payload.message);\n    }\n\n    resetForm();\n  };\n\n  const togglePassword = () => {\n    setPasswordShown(!passwordShown);\n  };\n\n  return (\n    <Box as=\"section\">\n      <LogoBg>\n        <Container>\n          <BoxAuth>\n            <TitleAuth>{t('Login')}</TitleAuth>\n            <Formik\n              initialValues={{ email: '', password: '' }}\n              onSubmit={handleSubmit}\n              validationSchema={schema}\n            >\n              {({ errors, touched, values }) => (\n                <FormCustom>\n                  <CustomField\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder={t('Email')}\n                    autoComplete=\"off\"\n                    errors={errors}\n                    touched={touched}\n                    values={values.email}\n                    required\n                  />\n                  <Error name=\"email\" component=\"div\" />\n                  <CustomField\n                    type={passwordShown ? 'text' : 'password'}\n                    name=\"password\"\n                    placeholder={t('Password')}\n                    autoComplete=\"off\"\n                    errors={errors}\n                    touched={touched}\n                    values={values.password}\n                    required\n                  />\n                  <Div>\n                    <LoginPOsitionBtn>\n                      <ButtonImg type=\"button\" onClick={togglePassword}>\n                        {passwordShown ? <OpenEyaIcon /> : <ClosedEyaIcon />}\n                      </ButtonImg>\n                    </LoginPOsitionBtn>\n\n                    <Error name=\"password\" component=\"div\" />\n                  </Div>\n                  <Button type=\"submit\">{t('Login')}</Button>\n\n                  <GoogleLoginButton href=\"https://petly-backend-flax.vercel.app/api/users/google\">\n                    {/* <GoogleLoginButton href=\"https://petly-gd7x.onrender.com/api/users/google\"> */}\n                    <GoogleImg src={GooglePic} alt=\"Google\" />\n                    {t('Login_with_Google')}\n                  </GoogleLoginButton>\n                </FormCustom>\n              )}\n            </Formik>\n            <RouteFormLoginRegister\n              link=\"/register\"\n              question={t('No_account')}\n              pageName={t('Register')}\n            />\n            <RouteFormLoginRegister\n              link=\"/restore\"\n              question={t('Password recovery')}\n              pageName={t('restore')}\n            />\n          </BoxAuth>\n        </Container>\n      </LogoBg>\n    </Box>\n  );\n};\n\nexport default LoginPage;\n"],"names":["schema","yup","shape","email","min","i18n","max","matches","required","password","useState","passwordShown","setPasswordShown","dispatch","useDispatch","t","useTranslation","location","useLocation","useEffect","document","title","handleSubmit","values","resetForm","logIn","resultLogin","type","toast","payload","message","togglePassword","Box","as","initialValues","onSubmit","validationSchema","errors","touched","name","placeholder","autoComplete","component","onClick","href","src","GooglePic","alt","link","question","pageName"],"sourceRoot":""}